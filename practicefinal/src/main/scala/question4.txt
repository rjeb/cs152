Jason Thai

The variable n in the mul_by_n function is defined just before the function is defined
with the following: "final Integer n = 3;". The variable x in the mul_by_n function is
passed into it. In this program, when it calls return twice.invoke(mul_by_n, 2) a '2'
is passed in for x and it uses the 3 for n that was already defined.

These lines are what load n to 3.
       8: iconst_3  //This loads the constant 3
       9: invokestatic  #7                  // converts to Integer object
      12: astore_1 //stores in local variable #1
These lines are what load x to 2.
      24: iconst_2 //This loads the constant 2
      25: invokestatic  #7                  // converts to Integer object
      28: invokeinterface #10,  3           // calls twice on the number (which passes it to mul_by_n)


The following is what I get from javap.
Compiled from "Main.java"
public class Main {
  public Main();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public static void main(java.lang.String[]);
    Code:
       0: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;
       3: invokestatic  #3                  // Method main:()Ljava/lang/Integer;
       6: invokevirtual #4                  // Method java/io/PrintStream.println:(Ljava/lang/Object;)V
       9: return

  public static java.lang.Integer main();
    Code:
       0: new           #5                  // class Main$1
       3: dup
       4: invokespecial #6                  // Method Main$1."<init>":()V
       7: astore_0
       8: iconst_3
       9: invokestatic  #7                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      12: astore_1
      13: new           #8                  // class Main$2
      16: dup
      17: aload_1
      18: invokespecial #9                  // Method Main$2."<init>":(Ljava/lang/Integer;)V
      21: astore_2
      22: aload_0
      23: aload_2
      24: iconst_2
      25: invokestatic  #7                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      28: invokeinterface #10,  3           // InterfaceMethod Function2.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      33: checkcast     #11                 // class java/lang/Integer
      36: areturn
}

