Lab 3
Vincent Diep 007329959
Jason Thai 010954385


Step 1:
	#1 It checks if the input parameter is even
	If there is a remainder after division by 2 then the result is odd.
	
	#2 Vector(2, 4, 6, 8, 10)
	
	#3 filter calls isEven on each element and places it into a new list if the result is true
	
Step 2:
	#1 0 and 9
	
	#2 10 indicates the cap of the generate numbers
	
	#3 
		def randList(len:Int, n:Int): List[Int] = {
	
		if(len == 0){
			Nil
		}
		else{
			gen.nextInt(n)::randList(len-1,n)
		}
	
	}                                         //> randList: (len: Int, n: Int)List[Int]

	#4 
	We get a list of 5 values whose elements are between 0 and 999 inclusive
	We get a list of 1000 elements whose values are between 0 and 4 inclusive
	
	#5 randList is a closure bc it uses gen which is defined outside the function
	
Step 3:
	#1 
	  def greaterThan100(lst : List[Int]) = {
  val fun =  (x:Int) => x>100// your work 
  lst.filter(fun) // NOTE: The last expression in a { ... } is its value
	}
	
	#2 List( 102, 112, 166, 174)
		This gives us confidence b/c all of these values are greater than 100
	
	#3 
		def greaterThan(n:Int, lst: List[Int]) = {
		val fun = (x:Int) => x>n
		lst.filter(fun)
	}      
	
	#4 List[Int] = List(137, 191, 167, 165)
	
	#5 fun uses n which is not defined inside fun
	
Step 4:
	#1 3
	#2	reduceLeft returns -13
		reduceRight returns 3
	#3 reduceLeft will produce 1729
	#4	We implemented reduceRight in lecture.
		  def otherReduce(lst: List[Int], op: (Int, Int) => Int) = {
  def otherReduceHelper(lst: List[Int], op: (Int, Int) => Int, partialResult: Int): Int =
    if (lst.isEmpty) partialResult else
    otherReduceHelper(lst.tail, op, op(partialResult, lst.head))
    otherReduceHelper(lst.tail, op, lst.head)
    }