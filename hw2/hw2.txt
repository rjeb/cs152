Jason Thai 010954385
CS 152
Homework 2

1. There is a bijection between number lists (000, 001, 010, ...) and
subsetStrings of strings of length 3. This is because we treat 0's as
cases where the character is not used in a substring and 1's as cases
where the character is used in a substring.

For this problem I generated a list (000, 001, 010, 011, etc) using
the onebits function up to the number of digits string 's' has. For
example, string "party" would have numbers between 00000 to 11111.
Then these number lists are converted to a list of their indecies
(0101 -> List(2, 4)) through onebits. After this, I have a list of
list[int] that contains all possible "choices" you could have for
selecting characters from the original string. Then I recursively
call printAll() which generates a substring using the head of the
list of indecies and recurses until the list of indecies is empty.
All of these strings are seperated by the character "|". After this,
you will have a string with all substrings generated. 

2. For this problem we do the largest case we can and reduce the size
until we find a length that works. We have two strings str1("probase") and str2("case"). In this case str2 is the smaller one.
We start with all substrings of case of size 4(The length of str2)
and see if str1 contains any of those substrings. In this case, str1
doesn't contain "case" so we call the common checker again with the
integer (length) we check reduced by one. In this iteration, it
checks for whether str1 contains "cas", or "ase". Str1 contains case
so the function ends there and returns "ase" as the common substring.

3.
To convert a number into a list of positions we have a couple of
steps. Firstly, we convert it to binary. To do this we % 2 and if the
remainder is 1, we append a 1 to the list for the binary
representation. If the remainder is 0, we append 0 to the list.
Continue to the point where /2 yeilds a 0(end case). After this we
have a list that holds the binary representation of the number. For
example, 13 would yeild a list of (1101). I used the reversed
function taught in class to get the list in an order that is easier
to work with. Once we have the binary representation we run it
through a convertIndeceies function which simply checks if the head
contains a '1' value. If it does, append the index to a list that
holds the indecies. We continue this until the binary representation
list is empty. 
