Lab 7
2/26 Lecture
Jason Thai: 010954385 & Vincent Diep: 007329959


#1)

object Main extends App{
  abstract class SimpleTree
  case class Leaf(value : Int) extends SimpleTree
  case class Node(left : SimpleTree, right : SimpleTree) extends SimpleTree 
  
  def sum(t : SimpleTree) : Int = t match { 
    case Node(l, r) => sum(l) + sum(r) 
    case Leaf(v) => v 
  }
  
  class Expr
  case class Number(value : Int) extends Expr
  case class Variable(name : String) extends Expr
  case class Operator(left : Expr, right : Expr, f: (Int, Int) => Int) extends Expr
  
  def eval(expr : Expr, symbols : Map[String, Int]) : Int = 
  expr match {
    case Number(num) => num
    case Variable(name) => symbols(name)
    case Operator(left, right, f) => f(eval(left, symbols), eval(right, symbols))
  }
  
  val textExpr = Operator(Number(3), Operator(Number(4), Variable("x"), _*_), _+_)
  println("Tree for expression: " + textExpr)
  val answer = eval(textExpr, Map("x" -> 5))
  
  println(answer)
  
  
}

#2)
class Expr
  case class Number(value : Int) extends Expr
  case class Variable(name : String) extends Expr
  case class Operator(left : Expr, right : Expr, f: (Int, Int) => Int) extends Expr
  case class Definition(name : String, expr : Expr)
  

object Main extends App{
  abstract class SimpleTree
  case class Leaf(value : Int) extends SimpleTree
  case class Node(left : SimpleTree, right : SimpleTree) extends SimpleTree 
  
  def sum(t : SimpleTree) : Int = t match { 
    case Node(l, r) => sum(l) + sum(r) 
    case Leaf(v) => v 
  }

  def eval(expr : Expr, symbols : Map[String, Int]) : Int = 
  expr match {
    case Number(num) => num
    case Variable(name) => symbols(name)
    case Operator(left, right, f) => f(eval(left, symbols), eval(right, symbols))
  }
  
  def eval(d : Definition, symbols : Map[String, Int]) : Map[String, Int]=
    symbols + (d.name -> eval(d.expr, symbols))
  
  val textExpr = Operator(Number(3), Operator(Number(4), Variable("x"), _*_), _+_)
  println("Tree for expression: " + textExpr)
  val answer = eval(textExpr, Map("x" -> 5))
  
  println(answer)
  
  val def1 = Definition("x", Number(2))
  val def2 = Definition("y", Variable("x"))
  val sym0 = Map[String, Int]()
  val sym1 = eval(def1, sym0) // "x" -> 2
  val sym2 = eval(def2, sym1) // "x" -> 2, "y" -> 2
  System.out.println(sym2)
  
  
}